<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lesson-1</title>
   
</head>
<body>

    <script>
        var Tc = +prompt("Введите значение температуры в градусах Цельсия: ")
        var Tf = (9 / 5) * Tc + 32
        console.log("Температуре ", Tc, " градусов по Цельсию соответствует ", Tf, " градусов по Фаренгейту." )
    </script>

    <script>
        var admin, name; 
        name = "Василий";
        admin = name;
        console.log(admin)
    </script>

    <script>
        var a = 1000
        var b = "108"
        var c = a + b
        console.log("Сумма 1000 и '108' равна ", c)
    </script>

 <!--
Атрибут async означает, что скрипт абсолютно независим:
Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова),
…так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше)
Остальные скрипты не ждут async, и скрипты casync не ждут другие скрипты.
Так что если у нас есть несколько скриптов с async, они могут выполняться в любом порядке. То, что первое загрузится – запустится в первую очередь.

Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда DOM дерево будет полностью построено.
Скрипты с defer никогда не блокируют страницу.
Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.
Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.
 -->

</body>


</html>
