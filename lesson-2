<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
<!-- Задача 1. Почему код даёт именно такие результаты? -->
<script>
    var a = 1, b = 1, c, d;
    c = ++a; alert(c); // 2 
    /* Инкремент "++" применяется для краткости записи при увеличении значения переменной (операнда) на единицу. В случае применения префиксной формы инкремента происходит сначала увеличение значения переменной (операнда) на единицу, а затем ее вывод или дальнейшее применение в коде. В выражении присвоения значения переменной "с" первоначально происходит увеличение значения переменной "а", после которого значение "а" становится равным 2, а затем осуществляется вывод значения переменной "с" командой alert */

    d = b++; alert(d); // 1    
    /* В случае применения постфиксной формы инкремента происходит сначала вывод значения переменной (операнда), а затем ее увеличение на единицу с дальнейшим применением в коде. В выражении присвоения значения переменной "d" первоначально происходит вывод переменной "b" командой alert, а только затем увеличение значения переменной "b" на единицу. */  
        
    c = (2+ ++a); alert(c); // 5 	
    d = (2+ b++); alert(d); // 4 
    /* На основании пояснений выше,в выражении c = ++a; произошло увеличение значения переменной "а". В выражении c = (2 + ++a); происходит дальнейшее увеличение значения переменной "а" на единицу (путем применения префиксного инкремента), что дает значение "3", а затем ее сложение с числом "2", что дает конечное значение переменной "с" равное "5".
    Также в выражении d = b++; , указанном выше произошло увеличение значение переменной "b". В выражении d = (2 + b++); применяется первоначально увеличенная на единицу переменная "b", т.е. со значением "2", но в данном выражении увеличение ее значения при использовании инкремента на происходит, т.к. инкремент применен в постфиксной форме. Таким образом, происходит сложение числового значения "2" и переменной "b" со значением "2".*/

    alert(a); // 3	
    alert(b); // 3	
    /* В выражениях, приведенных в условии: с = ++a; и c = (2 + ++a); - переменная "а" увеличилась пошагово (путем двухкратного применения префиксных инкрементов) с первоначального значения "1" до значения "2" и,затем, до значения "3". Поэтому при выводе в последнем выражении отображается значение "3".
    То же самое произошло с переменной "b" в двух предшествующих выражениях: d = b++; и d = (2 + b++); - , но только с применением постфиксных инкрементов, что привело к увеличению ее значения до "3". Так как выражение alert(b) стоит в самом конце всех преобразований значений рассматриваемой переменной, то разница между применением постфиксного или префиксного инкремента отсутствует.*/

</script>

    <!-- Задача 2. Чему будет равен x в примере ниже? -->
<script>
    var a = 2;
    var x = 1 + (a *= 2); 
    /* В выражении var x = 1 + (a *= 2); применена краткая форма записи арифметического оператора "*=", которая соответствует полной форме выражения: var x = 1 + (а = а * 2); - значение переменной "x", согласно арифметическим действиям, будет равно "5". */
</script>

    <!-- Задача 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем 		
            написать скрипт, который работает по следующему принципу:
            * если a и b положительные, вывести их разность;
            * если а и b отрицательные, вывести их произведение;
            * если а и b разных знаков, вывести их сумму;
            ноль можно считать положительным числом. -->
<script>
    var a = +prompt('Введите значение переменной a:');
	var b = +prompt('Введите значение переменной b:');
    if (a > 0 && b > 0){
        alert(a - b);
    } 
    else if (a < 0 && b < 0){
        alert (a * b);
    }
    else if (a > 0 && b < 0 || a < 0 && b > 0) {
        alert (a + b);
    }
    
</script>

    <!-- Задача 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод 	
           чисел от a до 15. -->
<script>
    var a = +parseInt(Math.random() * (15 - 0) + 0);
    alert(a)
    var arr = [];
    switch (a) {
        case 0: for (var i = 0; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 1:	for (var i = 1; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 2:	for (var i = 2; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 3:	for (var i = 3; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 4:	for (var i = 4; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 5: for (var i = 5; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 6:	for (var i = 6; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 7:	for (var i = 7; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 8: for (var i = 8; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 9: for (var i = 9; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 10: for (var i = 10; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 11: for (var i = 11; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 12: for (var i = 12; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 13: for (var i = 13; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 14: for (var i = 14; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        case 15: for (var i = 15; i <= 15; i++) {
                arr.push(i);
            }
            alert(arr); break;
        }
</script>


    <!-- Задача 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно 		
               использовать оператор return. -->
<script>

    function addition(a, b) {
        return a + b;
    }
    function subtraction(a, b) {
        return a - b;
    }
    function division(a, b) {
        return a / b;
    }
    function multiplication(a, b) {
        return a * b;
    }

</script>

    <!-- Задача 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, 	
            arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного 		
            значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и 		
            вернуть полученное значение (использовать switch). -->
<script>
    
    function addition(a, b) {
        return a + b;
    }
    function subtraction(a, b) {
        return a - b;
    }
    function division(a, b) {
        return a / b;
    }
    function multiplication(a, b) {
        return a * b;
    }
    function mathOperation(arg1, arg2, operation){
        switch(operation){
            case 'сложение':
                return addition(arg1, arg2); break;
            case 'вычитание':
                return subtraction(arg1, arg2); break;
            case 'деление':
                return division(arg1, arg2); break;
            case 'умножение':
                return multiplication(arg1, arg2); break;
            }
    }
</script>

<!-- 7. *Сравнить null и 0. Попробуйте объяснить результат -->
<script>
    console.log(null > 0);
    console.log(null < 0)
    console.log(null >= 0);
    console.lognull <= 0;
    console.log('' <= 0);
    console.log('' >= 0);
    console.log(null == 0);
    console.log(typeof 0);
    console.log(typeof null);	
    /* В соответствии с приведенными в результатах скрипта выражениями видно, следующее:
a). При сравнении "null > 0" и "null < 0" играет роль то, что оба эти значения не являются ни Boolean, ни String, ни Undefined.
Значит, при проверке больше или меньше, оба значения приводятся к типу данных Number, т.е. "0" остается тем типом данных, которым он и является, а "null" преобразуется в Number со значением "+0" путем "+null". Выводится результат "false" потому, что "0" не может быть не больше и не меньше "+0".
б). Значения "null" и "0" являются разными типами данных, что при проверке их равенства (в том числе и строгого) возвращает значение "false".
в). При рассмотрении выражений типа "<="" и ">=", возвращающих значение "true", видно что в данном случае "null" принимается как некое отсутствующее значение, которое может быть как больше или равно "0", так и меньше или равно "0". То есть, пустая ячейка памяти со значением " " или "null" может быть заполнена любым значением, что делает выражением истинным по сути. */											
</script>

<!-- 8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень. -->
<script>
    function power(val, pow) {
		if (val == 0 || isNaN(val) || isNaN(pow)) {
		    return 'Ошибка ввода! Введены нечисловые значения или значение основания введено равным "0"';
		} 
		return val ** pow;
	}

</script>

</body>
</html>
